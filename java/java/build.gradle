buildscript {
    repositories {
        google()
        mavenCentral()
    }
}

plugins {
    id "de.undercouch.download" version "4.1.1"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.7
archivesBaseName = "signal-client-java"
version          = version_number
group            = group_info

repositories {
    mavenCentral()
    mavenLocal()
}

sourceSets {
    test {
        java {
            srcDirs = ['src/test/java/', project(':tests').file('src/test/java')]
        }
    }
    otherPlatformLibraries {}
}

dependencies {
    testCompile ('junit:junit:4.12')
}

test {
    testLogging {
        events 'passed'
        showStandardStreams = true
        showExceptions true
        exceptionFormat 'full'
        showCauses true
        showStackTraces true
    }

    include 'org/whispersystems/**'
    include 'org/signal/**'
}

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('sonatypeRepo') ? sonatypeRepo
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getRepositoryUsername() {
    return hasProperty('whisperSonatypeUsername') ? whisperSonatypeUsername : ""
}

def getRepositoryPassword() {
    return hasProperty('whisperSonatypePassword') ? whisperSonatypePassword : ""
}

signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask(":java:uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    configuration = configurations.archives
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: getReleaseRepositoryUrl()) {
            authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
        }

        pom.project {
            name 'signal-client-java'
            packaging 'jar'
            description 'Signal Protocol cryptography library for Java'
            url 'https://github.com/signalapp/libsignal-client'

            scm {
                url 'scm:git@github.com:signalapp/libsignal-client.git'
                connection 'scm:git@github.com:signalapp/libsignal-client.git'
                developerConnection 'scm:git@github.com:signalapp/libsignal-client.git'
            }

            licenses {
                license {
                    name 'AGPLv3'
                    url 'https://www.gnu.org/licenses/agpl-3.0.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    name 'Signal Messenger LLC'
                }
            }
        }
    }
}

task installArchives(type: Upload) {
    description "Installs the artifacts to the local Maven repository."
    configuration = configurations['archives']
    repositories {
        mavenDeployer {
            repository url: "file://${System.properties['user.home']}/.m2/repository"
        }
    }
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task packageSources(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task testableJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.otherPlatformLibraries.resources
    classifier = 'testable'

    onlyIf { gradle.taskGraph.hasTask(':java:uploadArchives') }

    def extraResources = ['signal_jni.dll', 'libsignal_jni.dylib']
    def extraResourcesDir = 'src/otherPlatformLibraries/resources'

    doFirst {
        mkdir extraResourcesDir
        extraResources.each { name ->
            download {
                src 'https://github.com/signalapp/libsignal-client/releases/download/v' + project.version + '/' + name
                dest extraResourcesDir + '/' + name
            }
        }
    }
}

artifacts {
    archives(packageJavadoc) {
        type = 'javadoc'
    }

    archives packageSources
    archives testableJar
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ':makeJniLibrariesDesktop'
}
